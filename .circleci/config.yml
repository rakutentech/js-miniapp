version: 2.1

commands:
  export-js-bridge:
    parameters:
      platform:
        description: Platform to export - android or ios
        type: string
    steps: 
      - run: 
          name: Publish <<parameters.platform>>
          command: |
            set -e
            git checkout js-bridge-<<parameters.platform>>
            cp js-miniapp-bridge/build/src/<<parameters.platform>>/bridge.js ./
            cp js-miniapp-bridge/build/src/<<parameters.platform>>/log.js ./
            if [[ `git status bridge.js log.js --porcelain` ]]; then
              git add ./bridge.js
              git add ./log.js
              git config user.name "CI Publisher"
              git config user.email "dev-opensource@mail.rakuten.com"
              git commit -m "export bridge/log resource [ci skip]"
              git push origin js-bridge-<<parameters.platform>>
            else
              echo "Nothing to commit"
            fi

jobs: 
  build-bridge:
    working_directory: ~/mini-js-bridge
    docker:
      - image: circleci/node:14.18.0
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies w/ Yarn
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Test
          command: yarn bridge test
      - run:
          name: Lint
          command: yarn bridge lint
      - run:
          name: Compile
          command: yarn bridge compile
      - run:
          name: code coverage
          command: yarn bridge coverage
      - persist_to_workspace:
          root: ~/mini-js-bridge
          paths:
            - js-miniapp-bridge/build/
            - js-miniapp-bridge/coverage/

  export-bridge:
    working_directory: ~/mini-js-bridge
    docker:
      - image: circleci/node:14.18.0
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - export-js-bridge:
          platform: ios
      - export-js-bridge:
          platform: android

  build-sdk:
    working_directory: ~/mini-js-sdk
    docker:
      - image: circleci/node:14.18.0
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies w/ Yarn
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run: #run lint and check for formatting
          name: check
          command: yarn sdk lint
      - run: #compile the code
          name: compile
          command: yarn sdk compile
      - run: # run tests
          name: test
          command: yarn sdk test
      - run:
          name: Generate Docs
          command: yarn sdk docs
      - run: # run coverage report
          name: code coverage
          command: yarn sdk coverage
      - store_artifacts: # special step to save test results as as artifact
          # Upload test summary for display in Artifacts
          path: js-miniapp-sdk/test-results/
          prefix: tests
      - store_artifacts: # for display in Artifacts
          path: js-miniapp-sdk/coverage/
          prefix: coverage
      - store_artifacts:
          path: js-miniapp-sdk/publishableDocs/
          prefix: docs
      - store_artifacts:
          path: js-miniapp-sdk/build
          prefix: build
      - store_test_results: # for display in Test Summary
          path: test-results
      - persist_to_workspace:
          root: ~/mini-js-sdk
          paths:
            - js-miniapp-sdk/build/
            - js-miniapp-sdk/publishableDocs/
            - js-miniapp-sdk/coverage/

  publish-sdk:
    working_directory: ~/mini-js-sdk
    docker:
      - image: circleci/node:14.18.0
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: publish to NPM
          command: |
            npm set //registry.npmjs.org/:_authToken=$NPM_TOKEN
            yarn sdk publish
      - run:
          name: Publish Documentation
          command: |
            set -e
            if [[ ! $CIRCLE_TAG == *"-"* ]]; then
              git checkout gh-pages
              cp -R ./js-miniapp-sdk/publishableDocs/docs/. ./docs
              cp -R ./js-miniapp-sdk/publishableDocs/_versions/. ./_versions
              git add docs _versions
              git config user.name "CI Publisher"
              git config user.email "dev-opensource@mail.rakuten.com"
              git commit -m "Publish documentation for $CIRCLE_TAG"
              git push origin gh-pages
            else
              echo "Documentation not published for snapshot version"
            fi
      - run:
          name: Publish GitHub Release
          command: |
            set -e
            curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
            if [[ ! $CIRCLE_TAG == *"-"* ]]; then
              echo "Publishing $CIRCLE_TAG release to GitHub"
              ./bin/hub release create -a ./js-miniapp-sdk/build/miniapp.bundle.js -m $CIRCLE_TAG $CIRCLE_TAG
            else
              echo "Publishing $CIRCLE_TAG pre-release to GitHub"
              ./bin/hub release create --prerelease -a ./js-miniapp-sdk/build/miniapp.bundle.js -m $CIRCLE_TAG $CIRCLE_TAG
            fi

  build-sample: # builds  & tests the sample app against latest sdk build.
    working_directory: ~/js-miniapp-sample
    docker:
      - image: circleci/node:14.18.0
      # TODO get the sdk build from saved workspace
    environment:
      PUBLIC_URL: .
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies w/ Yarn
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run: #checks for formatting
          name: check
          command: |
            yarn sample prettify
            yarn sample lint
            yarn sample flow
      - run:
          name: build
          command: yarn sample build
      - store_artifacts:
          path: js-miniapp-sample/build
          prefix: build
      - persist_to_workspace:
          root: ~/js-miniapp-sample
          paths:
            - js-miniapp-sample/build

  deploy-sample:
    working_directory: ~/js-miniapp-sample
    docker:
      - image: circleci/node:14.18.0
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Deploy Sample App to Github Pages
          command: |
            set -e
            git checkout gh-pages
            rm -rf ./sample
            mkdir sample
            cp -r ./js-miniapp-sample/build/* ./sample
            if [[ `git status sample --porcelain` ]]; then
              git add sample
              git config user.name "CI Publisher"
              git config user.email "dev-opensource@mail.rakuten.com"
              git commit -m "sample: Deploy JS Sample App [ci skip]"
              git push origin gh-pages
            else
              echo "Nothing to commit"
            fi

  upload-coverage:
    working_directory: ~/js-miniapp
    docker:
      - image: circleci/node:14.18.0
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: upload coverage
          command: bash <(curl -s https://codecov.io/bash)

workflows:
  version: 2
  build-and-release:
    jobs:
      - build-bridge
      - export-bridge:
          requires:
           - build-bridge
          filters:
            branches:
              only: master
      - build-sdk:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      - sdk-release-verification:
          type: approval
          requires:
            - build-sdk
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-sdk:
          requires:
            - sdk-release-verification
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-sample
      - deploy-sample:
          requires:
           - build-sample
          filters:
            branches:
              only: master
      - upload-coverage:
          requires:
           - build-sdk
           - build-bridge
